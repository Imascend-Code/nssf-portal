"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import environ
from django.core.management.utils import get_random_secret_key

BASE_DIR = Path(__file__).resolve().parent.parent

# --- env setup
env = environ.Env(
    DEBUG=(bool, True),
    SECRET_KEY=(str, None),
    ALLOWED_HOSTS=(list, []),
    CORS_ORIGIN=(str, "http://localhost:5173"),
)
environ.Env.read_env(BASE_DIR / ".env")

# --- core settings
SECRET_KEY = env("SECRET_KEY") or get_random_secret_key()   # fallback in dev
DEBUG = env.bool("DEBUG")
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

CORS_ORIGIN = env.str("CORS_ORIGIN")
CORS_ALLOWED_ORIGINS = env.list("CORS_ORIGINS", default=["http://localhost:5173","http://127.0.0.1:5173"])


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # third-party
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
    "django_filters",

    # local apps
    "accounts",
    "profiles",
    "payments",
    "services",
    "notifications",
    "audits",
    "reports",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",           # put CORS above CommonMiddleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "audits.middleware.AuditMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = "config.urls"
AUTH_USER_MODEL = "accounts.User"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS
CORS_ALLOWED_ORIGINS = [env.str("CORS_ORIGIN")]
CORS_ALLOW_CREDENTIALS = True

# DRF
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

SPECTACULAR_SETTINGS = {
    "TITLE": "NSSF Pensioner Self-Service API",
    "DESCRIPTION": "Public + authenticated endpoints for Pensioners, Staff, and Admin.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,  # schema is served at /api/schema/
    "SCHEMA_PATH_PREFIX": r"/api/v1",  # show only API v1 routes
    "COMPONENT_SPLIT_REQUEST": True,   # nicer request/response separation
    "SERVE_PERMISSIONS": [],           # allow docs in dev
    "CONTACT": {"name": "NSSF Support", "email": "support@nssf.test"},
    "LICENSE": {"name": "MIT"},
    "EXTERNAL_DOCS": {"description": "Project Readme", "url": "https://example.com/readme"},

    # Proper JWT bearer
    "SECURITY": [{"BearerAuth": []}],
    "AUTHENTICATION_WHITELIST": [],

    # UI tweaks
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "displayRequestDuration": True,
        "persistAuthorization": True,
        "filter": True,
        "tryItOutEnabled": True,
    },

    # Custom components (Bearer)
    "COMPONENTS": {
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Use the access token from /api/v1/auth/login/ as: `Authorization: Bearer <token>`",
            }
        }
    },

    # Optional servers section for the spec
    "SERVERS": [
        {"url": "http://127.0.0.1:8000", "description": "Local Dev"},
        {"url": "https://api.nssf.test", "description": "Staging/Prod"},
    ],
    
    "TAG_NAMES": [
        "Auth",
        "Profile",
        "Beneficiaries",
        "Payments",
        "Service Requests",
        "Notifications",
        "Documents",
        "Reports",
        "Audits",
    ],

}


from datetime import timedelta
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"