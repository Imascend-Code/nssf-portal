/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/audits/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read-only access to audit logs (Admin only).
         *     Supports filters: actor, action, model, status_code; ordering by created_at. */
        get: operations["audits_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/audits/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read-only access to audit logs (Admin only).
         *     Supports filters: actor, action, model, status_code; ordering by created_at. */
        get: operations["audits_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["auth_me_retrieve"];
        put: operations["auth_me_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["auth_me_partial_update"];
        trace?: never;
    };
    "/api/v1/auth/me/change-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_me_change_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["auth_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["notifications_list"];
        put?: never;
        post: operations["notifications_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["notifications_retrieve"];
        put: operations["notifications_update"];
        post?: never;
        delete: operations["notifications_destroy"];
        options?: never;
        head?: never;
        patch: operations["notifications_partial_update"];
        trace?: never;
    };
    "/api/v1/notifications/{id}/mark_read/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["notifications_mark_read_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/mark_all_read/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["notifications_mark_all_read_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["payments_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["payments_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles/beneficiaries/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["profiles_beneficiaries_list"];
        put?: never;
        post: operations["profiles_beneficiaries_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles/beneficiaries/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["profiles_beneficiaries_retrieve"];
        put: operations["profiles_beneficiaries_update"];
        post?: never;
        delete: operations["profiles_beneficiaries_destroy"];
        options?: never;
        head?: never;
        patch: operations["profiles_beneficiaries_partial_update"];
        trace?: never;
    };
    "/api/v1/profiles/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["profiles_me_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles/me/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["profiles_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["profiles_me_partial_update"];
        trace?: never;
    };
    "/api/v1/profiles/me/beneficiaries/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["profiles_me_beneficiaries_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["reports_summary_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/requests/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["requests_list"];
        put?: never;
        post: operations["requests_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/requests/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["requests_retrieve"];
        put: operations["requests_update"];
        post?: never;
        delete: operations["requests_destroy"];
        options?: never;
        head?: never;
        patch: operations["requests_partial_update"];
        trace?: never;
    };
    "/api/v1/requests/{id}/attachments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload attachment
         * @description Attach a PDF/JPG/PNG (<=5MB) to a request.
         */
        post: operations["requests_attachments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service-categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["service_categories_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service-categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["service_categories_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuditLog: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            readonly actor: number | null;
            readonly actor_email: string;
            readonly action: string;
            readonly model: string;
            readonly object_id: string;
            readonly status_code: number;
            readonly path: string;
            readonly changes: unknown;
            readonly ip_address: string | null;
        };
        Beneficiary: {
            readonly id: number;
            full_name: string;
            relationship: string;
            /** Format: int64 */
            percentage: number;
            phone?: string;
            national_id?: string;
            readonly profile: number;
        };
        BeneficiaryRequest: {
            full_name: string;
            relationship: string;
            /** Format: int64 */
            percentage: number;
            phone?: string;
            national_id?: string;
        };
        /**
         * @description * `email` - email
         *     * `in_app` - in_app
         * @enum {string}
         */
        ChannelEnum: "email" | "in_app";
        Me: {
            readonly id: number;
            /** Format: email */
            readonly email: string;
            readonly role: components["schemas"]["RoleEnum"];
            full_name?: string;
            phone?: string;
        };
        MeRequest: {
            full_name?: string;
            phone?: string;
        };
        Notification: {
            readonly id: number;
            channel?: components["schemas"]["ChannelEnum"];
            subject: string;
            message: string;
            readonly was_read: boolean;
            /** Format: date-time */
            readonly sent_at: string;
            readonly user: number;
        };
        NotificationRequest: {
            channel?: components["schemas"]["ChannelEnum"];
            subject: string;
            message: string;
        };
        PaginatedAuditLogList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["AuditLog"][];
        };
        PaginatedBeneficiaryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Beneficiary"][];
        };
        PaginatedNotificationList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Notification"][];
        };
        PaginatedPaymentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Payment"][];
        };
        PaginatedPensionerProfileList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["PensionerProfile"][];
        };
        PaginatedServiceCategoryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["ServiceCategory"][];
        };
        PaginatedServiceRequestList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["ServiceRequest"][];
        };
        PatchedBeneficiaryRequest: {
            full_name?: string;
            relationship?: string;
            /** Format: int64 */
            percentage?: number;
            phone?: string;
            national_id?: string;
        };
        PatchedMeRequest: {
            full_name?: string;
            phone?: string;
        };
        PatchedNotificationRequest: {
            channel?: components["schemas"]["ChannelEnum"];
            subject?: string;
            message?: string;
        };
        PatchedPensionerProfileRequest: {
            /** Format: date */
            dob?: string | null;
            national_id?: string;
            address?: string;
            city?: string;
            bank_name?: string;
            bank_account?: string;
            next_of_kin_name?: string;
            next_of_kin_phone?: string;
            /** Format: binary */
            avatar?: string | null;
        };
        Payment: {
            readonly id: number;
            /** Format: date */
            period_start: string;
            /** Format: date */
            period_end: string;
            /** Format: decimal */
            amount: string;
            status?: components["schemas"]["PaymentStatusEnum"];
            /** Format: date-time */
            paid_at?: string | null;
            reference: string;
            readonly pensioner: number;
        };
        /**
         * @description * `processed` - processed
         *     * `pending` - pending
         *     * `on_hold` - on_hold
         * @enum {string}
         */
        PaymentStatusEnum: "processed" | "pending" | "on_hold";
        PensionerProfile: {
            readonly id: number;
            readonly nssf_number: string;
            /** Format: date */
            dob?: string | null;
            national_id?: string;
            address?: string;
            city?: string;
            bank_name?: string;
            bank_account?: string;
            next_of_kin_name?: string;
            next_of_kin_phone?: string;
            /** Format: uri */
            avatar?: string | null;
            /** Format: date-time */
            readonly last_verified_at: string | null;
            readonly user: number;
        };
        /**
         * @description * `low` - low
         *     * `normal` - normal
         *     * `high` - high
         * @enum {string}
         */
        PriorityEnum: "low" | "normal" | "high";
        Register: {
            readonly id: number;
            /** Format: email */
            email: string;
            full_name?: string;
            phone?: string;
        };
        RegisterRequest: {
            /** Format: email */
            email: string;
            password: string;
            full_name?: string;
            phone?: string;
        };
        RequestAttachment: {
            readonly id: number;
            /** Format: uri */
            file: string;
            readonly uploaded_by: number;
            /** Format: date-time */
            readonly uploaded_at: string;
        };
        RequestAttachmentRequest: {
            /** Format: binary */
            file: string;
        };
        /**
         * @description * `PENSIONER` - Pensioner
         *     * `STAFF` - Staff
         *     * `ADMIN` - Admin
         * @enum {string}
         */
        RoleEnum: "PENSIONER" | "STAFF" | "ADMIN";
        ServiceCategory: {
            readonly id: number;
            name: string;
            description?: string;
        };
        ServiceRequest: {
            readonly id: number;
            readonly attachments: components["schemas"]["RequestAttachment"][];
            title: string;
            description: string;
            readonly status: components["schemas"]["ServiceStatusEnum"];
            priority?: components["schemas"]["PriorityEnum"];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Format: date-time */
            readonly resolved_at: string | null;
            readonly requester: number;
            category: number;
            readonly assigned_to: number | null;
        };
        ServiceRequestRequest: {
            title: string;
            description: string;
            priority?: components["schemas"]["PriorityEnum"];
            category: number;
        };
        /**
         * @description * `submitted` - submitted
         *     * `under_review` - under_review
         *     * `in_progress` - in_progress
         *     * `resolved` - resolved
         *     * `rejected` - rejected
         *     * `closed` - closed
         * @enum {string}
         */
        ServiceStatusEnum: "submitted" | "under_review" | "in_progress" | "resolved" | "rejected" | "closed";
        TokenObtainPair: {
            readonly access: string;
            readonly refresh: string;
        };
        TokenObtainPairRequest: {
            email: string;
            password: string;
        };
        TokenRefresh: {
            readonly access: string;
        };
        TokenRefreshRequest: {
            refresh: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    audits_list: {
        parameters: {
            query?: {
                action?: string;
                actor?: number;
                model?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
                status_code?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuditLogList"];
                };
            };
        };
    };
    audits_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this audit log. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuditLog"];
                };
            };
        };
    };
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPairRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPairRequest"];
                "multipart/form-data": components["schemas"]["TokenObtainPairRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    auth_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Me"];
                };
            };
        };
    };
    auth_me_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MeRequest"];
                "multipart/form-data": components["schemas"]["MeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Me"];
                };
            };
        };
    };
    auth_me_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMeRequest"];
                "multipart/form-data": components["schemas"]["PatchedMeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Me"];
                };
            };
        };
    };
    auth_me_change_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RegisterRequest"];
                "multipart/form-data": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Register"];
                };
            };
        };
    };
    notifications_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotificationList"];
                };
            };
        };
    };
    notifications_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationRequest"];
                "multipart/form-data": components["schemas"]["NotificationRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationRequest"];
                "multipart/form-data": components["schemas"]["NotificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notifications_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedNotificationRequest"];
                "multipart/form-data": components["schemas"]["PatchedNotificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_mark_read_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationRequest"];
                "multipart/form-data": components["schemas"]["NotificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_mark_all_read_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationRequest"];
                "multipart/form-data": components["schemas"]["NotificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    payments_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPaymentList"];
                };
            };
        };
    };
    payments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    profiles_beneficiaries_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBeneficiaryList"];
                };
            };
        };
    };
    profiles_beneficiaries_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BeneficiaryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BeneficiaryRequest"];
                "multipart/form-data": components["schemas"]["BeneficiaryRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    profiles_beneficiaries_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    profiles_beneficiaries_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BeneficiaryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BeneficiaryRequest"];
                "multipart/form-data": components["schemas"]["BeneficiaryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    profiles_beneficiaries_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    profiles_beneficiaries_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBeneficiaryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBeneficiaryRequest"];
                "multipart/form-data": components["schemas"]["PatchedBeneficiaryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    profiles_me_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPensionerProfileList"];
                };
            };
        };
    };
    profiles_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PensionerProfile"];
                };
            };
        };
    };
    profiles_me_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPensionerProfileRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPensionerProfileRequest"];
                "multipart/form-data": components["schemas"]["PatchedPensionerProfileRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PensionerProfile"];
                };
            };
        };
    };
    profiles_me_beneficiaries_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PensionerProfile"];
                };
            };
        };
    };
    reports_summary_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    requests_list: {
        parameters: {
            query?: {
                category?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description * `low` - low
                 *     * `normal` - normal
                 *     * `high` - high */
                priority?: "high" | "low" | "normal";
                requester?: number;
                /** @description A search term. */
                search?: string;
                /** @description * `submitted` - submitted
                 *     * `under_review` - under_review
                 *     * `in_progress` - in_progress
                 *     * `resolved` - resolved
                 *     * `rejected` - rejected
                 *     * `closed` - closed */
                status?: "closed" | "in_progress" | "rejected" | "resolved" | "submitted" | "under_review";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedServiceRequestList"];
                };
            };
        };
    };
    requests_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceRequestRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ServiceRequestRequest"];
                "multipart/form-data": components["schemas"]["ServiceRequestRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceRequest"];
                };
            };
        };
    };
    requests_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service request. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceRequest"];
                };
            };
        };
    };
    requests_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service request. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    requests_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service request. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    requests_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service request. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    requests_attachments_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service request. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequestAttachment"];
                };
            };
        };
    };
    service_categories_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedServiceCategoryList"];
                };
            };
        };
    };
    service_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceCategory"];
                };
            };
        };
    };
}
