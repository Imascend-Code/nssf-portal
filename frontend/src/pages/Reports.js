import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Container, Card, CardHeader, CardContent, Typography, Grid, Stack, Table, TableBody, TableCell, TableHead, TableRow, TableContainer, CircularProgress, Button, Alert, Box } from "@mui/material";
import ReceiptLongIcon from "@mui/icons-material/ReceiptLong";
import CreditScoreIcon from "@mui/icons-material/CreditScore";
import { useProfile, usePayments } from "../api/hooks";
function Money({ v }) {
    if (v == null)
        return _jsx(_Fragment, { children: "\u2014" });
    const n = typeof v === "string" ? Number(v) : v;
    if (Number.isNaN(n))
        return _jsx(_Fragment, { children: String(v) });
    return _jsx(_Fragment, { children: new Intl.NumberFormat("en-UG", { style: "currency", currency: "UGX" }).format(n) });
}
export default function Reports() {
    const me = useProfile();
    const payments = usePayments({ page_size: 12, ordering: "-period_start" });
    const balance = me.data?.balance ?? 0;
    return (_jsxs(Container, { maxWidth: "lg", sx: { py: 4 }, children: [_jsx(Typography, { variant: "h5", fontWeight: 800, sx: { mb: 2 }, children: "My Reports" }), _jsxs(Grid, { container: true, spacing: 2, sx: { mb: 2 }, children: [_jsx(Grid, { item: true, xs: 12, md: 6, children: _jsxs(Card, { variant: "outlined", sx: { borderRadius: 3, height: "100%" }, children: [_jsx(CardHeader, { title: "Current Balance", action: _jsx(CreditScoreIcon, { color: "primary" }) }), _jsx(CardContent, { children: me.isLoading ? (_jsx(Stack, { alignItems: "center", sx: { py: 3 }, children: _jsx(CircularProgress, { size: 22 }) })) : me.isError ? (_jsx(Alert, { severity: "error", children: "Failed to load profile." })) : (_jsxs(_Fragment, { children: [_jsx(Typography, { variant: "h4", fontWeight: 800, sx: { lineHeight: 1 }, children: _jsx(Money, { v: balance }) }), _jsx(Typography, { variant: "caption", color: "text.secondary", children: "As per your account" })] })) })] }) }), _jsx(Grid, { item: true, xs: 12, md: 6, children: _jsxs(Card, { variant: "outlined", sx: { borderRadius: 3, height: "100%" }, children: [_jsx(CardHeader, { title: "Statements", action: _jsx(ReceiptLongIcon, { color: "primary" }) }), _jsx(CardContent, { children: _jsxs(Stack, { spacing: 1, children: [_jsx(Typography, { variant: "body2", color: "text.secondary", children: "Download a PDF statement for your records." }), _jsxs(Stack, { direction: "row", spacing: 1, children: [_jsx(Button, { variant: "outlined", size: "small", onClick: () => window.open("/api/v1/reports/summary/?format=csv", "_blank"), children: "Export CSV" }), _jsx(Button, { variant: "outlined", size: "small", onClick: () => window.open("/api/v1/reports/summary/?format=pdf", "_blank"), children: "Export PDF" })] }), _jsx(Typography, { variant: "caption", color: "text.secondary", children: "Tip: you can print or save the PDF for any official use." })] }) })] }) })] }), _jsxs(Card, { variant: "outlined", sx: { borderRadius: 3 }, children: [_jsx(CardHeader, { title: "Recent Payments" }), _jsx(CardContent, { children: payments.isLoading ? (_jsx(Stack, { alignItems: "center", sx: { py: 3 }, children: _jsx(CircularProgress, { size: 22 }) })) : payments.isError ? (_jsx(Alert, { severity: "error", children: "Failed to load payments." })) : (payments.data || []).length === 0 ? (_jsx(Typography, { variant: "body2", color: "text.secondary", children: "No payments found." })) : (_jsx(TableContainer, { sx: { borderRadius: 1, border: 1, borderColor: "divider" }, children: _jsxs(Table, { size: "small", children: [_jsx(TableHead, { children: _jsxs(TableRow, { children: [_jsx(TableCell, { children: "Period" }), _jsx(TableCell, { align: "right", children: "Amount" }), _jsx(TableCell, { children: "Status" }), _jsx(TableCell, { children: "Reference" })] }) }), _jsx(TableBody, { children: (payments.data || []).map((p) => (_jsxs(TableRow, { hover: true, children: [_jsxs(TableCell, { children: [p.period_start, " \u2013 ", p.period_end] }), _jsx(TableCell, { align: "right", children: _jsx(Money, { v: p.amount }) }), _jsx(TableCell, { sx: { textTransform: "capitalize" }, children: p.status || "—" }), _jsx(TableCell, { children: p.reference || "—" })] }, p.id))) })] }) })) })] }), _jsx(Box, { mt: 2, children: _jsx(Typography, { variant: "caption", color: "text.secondary", children: "Having trouble? Ensure you\u2019re logged in and the backend endpoints are reachable." }) })] }));
}
